{"ast":null,"code":"const BASE_URL = 'https://auth.nomoreparties.co';\nexport const register = (email, password) => {\n  return fetch(`${BASE_URL}/signup`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  }).then(response => {\n    return response.json();\n  }).then(res => {\n    return res;\n  }).catch(err => console.log(err));\n};\nexport const login = (email, password) => {\n  return fetch(`${BASE_URL}/signin`, {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  }).then(response => response.ok ? response.json() : Promise.reject(`Ошибка ${response.status} — ${response.messege}`)).then(data => {\n    localStorage.setItem('token', data.token);\n    return data;\n  });\n};\nexport const checkToken = token => {\n  return fetch(`${BASE_URL}/users/me`, {\n    method: 'GET',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    }\n  }).then(res => res.json()).then(data => data);\n}; // функция register - принимает почту и пароль, отправляет запрос регистрации на /signup\n// функция login - принимает почту и пароль, отправляет запрос авторизации на /signin . В ответ сервер вернет jwt, который нужно сохранить в localStorage\n// функция checkToken - принимает jwt, отправляет запрос на /users/me и возвращает данные пользователя","map":{"version":3,"sources":["/Users/sxep/Documents/dev/react-mesto-auth/src/utils/auth.js"],"names":["BASE_URL","register","email","password","fetch","method","headers","body","JSON","stringify","then","response","json","res","catch","err","console","log","login","ok","Promise","reject","status","messege","data","localStorage","setItem","token","checkToken"],"mappings":"AAEA,MAAMA,QAAQ,GAAG,+BAAjB;AAGA,OAAO,MAAMC,QAAQ,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC3C,SAAOC,KAAK,CAAE,GAAEJ,QAAS,SAAb,EAAuB;AACjCK,IAAAA,MAAM,EAAE,MADyB;AAEjCC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT,KAFwB;AAKjCC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAACP,MAAAA,KAAD;AAAQC,MAAAA;AAAR,KAAf;AAL2B,GAAvB,CAAL,CAONO,IAPM,CAOAC,QAAD,IAAc;AAClB,WAAOA,QAAQ,CAACC,IAAT,EAAP;AACD,GATM,EAUNF,IAVM,CAUAG,GAAD,IAAS;AACb,WAAOA,GAAP;AACD,GAZM,EAaNC,KAbM,CAaCC,GAAD,IAASC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAbT,CAAP;AAcD,CAfM;AAiBP,OAAO,MAAMG,KAAK,GAAG,CAAChB,KAAD,EAAQC,QAAR,KAAqB;AACxC,SAAOC,KAAK,CAAE,GAAEJ,QAAS,SAAb,EAAuB;AACjCK,IAAAA,MAAM,EAAE,MADyB;AAEjCC,IAAAA,OAAO,EAAE;AACP,gBAAU,kBADH;AAEP,sBAAgB;AAFT,KAFwB;AAMjCC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAACP,MAAAA,KAAD;AAAQC,MAAAA;AAAR,KAAf;AAN2B,GAAvB,CAAL,CAQNO,IARM,CAQDC,QAAQ,IAAIA,QAAQ,CAACQ,EAAT,GAAcR,QAAQ,CAACC,IAAT,EAAd,GAAgCQ,OAAO,CAACC,MAAR,CAAgB,UAASV,QAAQ,CAACW,MAAO,MAAKX,QAAQ,CAACY,OAAQ,EAA/D,CAR3C,EASNb,IATM,CASAc,IAAD,IAAU;AACZC,IAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BF,IAAI,CAACG,KAAnC;AACA,WAAOH,IAAP;AACH,GAZM,CAAP;AAaD,CAdM;AAgBP,OAAO,MAAMI,UAAU,GAAID,KAAD,IAAW;AACnC,SAAOvB,KAAK,CAAE,GAAEJ,QAAS,WAAb,EAAyB;AACnCK,IAAAA,MAAM,EAAE,KAD2B;AAEnCC,IAAAA,OAAO,EAAE;AACP,gBAAU,kBADH;AAEP,sBAAgB,kBAFT;AAGP,uBAAkB,UAASqB,KAAM;AAH1B;AAF0B,GAAzB,CAAL,CAQNjB,IARM,CAQDG,GAAG,IAAIA,GAAG,CAACD,IAAJ,EARN,EASNF,IATM,CASDc,IAAI,IAAIA,IATP,CAAP;AAUD,CAXM,C,CAeP;AACA;AACA","sourcesContent":["\n\nconst BASE_URL = 'https://auth.nomoreparties.co';\n\n\nexport const register = (email, password) => {\n  return fetch(`${BASE_URL}/signup`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({email, password})\n  })\n  .then((response) => {\n    return response.json();\n  })\n  .then((res) => {\n    return res;\n  })\n  .catch((err) => console.log(err));\n};\n\nexport const login = (email, password) => {\n  return fetch(`${BASE_URL}/signin`, {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({email, password})\n  })\n  .then(response => response.ok ? response.json() : Promise.reject(`Ошибка ${response.status} — ${response.messege}`)) \n  .then((data) => {\n      localStorage.setItem('token', data.token);\n      return data;\n  })\n};\n\nexport const checkToken = (token) => {\n  return fetch(`${BASE_URL}/users/me`, {\n    method: 'GET',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`,\n    }\n  })\n  .then(res => res.json())\n  .then(data => data)\n}\n\n\n\n// функция register - принимает почту и пароль, отправляет запрос регистрации на /signup\n// функция login - принимает почту и пароль, отправляет запрос авторизации на /signin . В ответ сервер вернет jwt, который нужно сохранить в localStorage\n// функция checkToken - принимает jwt, отправляет запрос на /users/me и возвращает данные пользователя"]},"metadata":{},"sourceType":"module"}