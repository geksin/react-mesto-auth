{"ast":null,"code":"const BASE_URL = 'https://auth.nomoreparties.co';\nexport const register = (email, password) => {\n  return fetch(`${BASE_URL}/signup`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  }).then(response => response.ok ? response.json() : Promise.reject(`Ошибка ${response.status}`));\n};\nexport const login = (email, password) => {\n  return fetch(`${BASE_URL}/signin`, {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  }).then(response => response.ok ? response.json() : Promise.reject(`Ошибка ${response.status}`)).then(data => {\n    localStorage.setItem('token', data.token);\n    return data;\n  });\n};\nexport const checkToken = token => {\n  return fetch(`${BASE_URL}/users/me`, {\n    method: 'GET',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    }\n  }).then(response => response.ok ? response.json() : Promise.reject(`Ошибка ${response.status}`));\n}; // функция register - принимает почту и пароль, отправляет запрос регистрации на /signup\n// функция login - принимает почту и пароль, отправляет запрос авторизации на /signin . В ответ сервер вернет jwt, который нужно сохранить в localStorage\n// функция checkToken - принимает jwt, отправляет запрос на /users/me и возвращает данные пользователя","map":{"version":3,"sources":["/Users/sxep/Documents/dev/react-mesto-auth/src/utils/auth.js"],"names":["BASE_URL","register","email","password","fetch","method","headers","body","JSON","stringify","then","response","ok","json","Promise","reject","status","login","data","localStorage","setItem","token","checkToken"],"mappings":"AAEA,MAAMA,QAAQ,GAAG,+BAAjB;AAGA,OAAO,MAAMC,QAAQ,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC3C,SAAOC,KAAK,CAAE,GAAEJ,QAAS,SAAb,EAAuB;AACjCK,IAAAA,MAAM,EAAE,MADyB;AAEjCC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT,KAFwB;AAKjCC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAACP,MAAAA,KAAD;AAAQC,MAAAA;AAAR,KAAf;AAL2B,GAAvB,CAAL,CAONO,IAPM,CAODC,QAAQ,IAAIA,QAAQ,CAACC,EAAT,GAAcD,QAAQ,CAACE,IAAT,EAAd,GAAgCC,OAAO,CAACC,MAAR,CAAgB,UAASJ,QAAQ,CAACK,MAAO,EAAzC,CAP3C,CAAP;AAQD,CATM;AAWP,OAAO,MAAMC,KAAK,GAAG,CAACf,KAAD,EAAQC,QAAR,KAAqB;AACxC,SAAOC,KAAK,CAAE,GAAEJ,QAAS,SAAb,EAAuB;AACjCK,IAAAA,MAAM,EAAE,MADyB;AAEjCC,IAAAA,OAAO,EAAE;AACP,gBAAU,kBADH;AAEP,sBAAgB;AAFT,KAFwB;AAMjCC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAACP,MAAAA,KAAD;AAAQC,MAAAA;AAAR,KAAf;AAN2B,GAAvB,CAAL,CAQNO,IARM,CAQDC,QAAQ,IAAIA,QAAQ,CAACC,EAAT,GAAcD,QAAQ,CAACE,IAAT,EAAd,GAAgCC,OAAO,CAACC,MAAR,CAAgB,UAASJ,QAAQ,CAACK,MAAO,EAAzC,CAR3C,EASNN,IATM,CASAQ,IAAD,IAAU;AACZC,IAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BF,IAAI,CAACG,KAAnC;AACA,WAAOH,IAAP;AACH,GAZM,CAAP;AAaD,CAdM;AAgBP,OAAO,MAAMI,UAAU,GAAID,KAAD,IAAW;AACnC,SAAOjB,KAAK,CAAE,GAAEJ,QAAS,WAAb,EAAyB;AACnCK,IAAAA,MAAM,EAAE,KAD2B;AAEnCC,IAAAA,OAAO,EAAE;AACP,gBAAU,kBADH;AAEP,sBAAgB,kBAFT;AAGP,uBAAkB,UAASe,KAAM;AAH1B;AAF0B,GAAzB,CAAL,CAQNX,IARM,CAQDC,QAAQ,IAAIA,QAAQ,CAACC,EAAT,GAAcD,QAAQ,CAACE,IAAT,EAAd,GAAgCC,OAAO,CAACC,MAAR,CAAgB,UAASJ,QAAQ,CAACK,MAAO,EAAzC,CAR3C,CAAP;AASD,CAVM,C,CAcP;AACA;AACA","sourcesContent":["\n\nconst BASE_URL = 'https://auth.nomoreparties.co';\n\n\nexport const register = (email, password) => {\n  return fetch(`${BASE_URL}/signup`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({email, password})\n  })\n  .then(response => response.ok ? response.json() : Promise.reject(`Ошибка ${response.status}`)) \n};\n\nexport const login = (email, password) => {\n  return fetch(`${BASE_URL}/signin`, {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({email, password})\n  })\n  .then(response => response.ok ? response.json() : Promise.reject(`Ошибка ${response.status}`)) \n  .then((data) => {\n      localStorage.setItem('token', data.token);\n      return data;\n  })\n};\n\nexport const checkToken = (token) => {\n  return fetch(`${BASE_URL}/users/me`, {\n    method: 'GET',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`,\n    }\n  })\n  .then(response => response.ok ? response.json() : Promise.reject(`Ошибка ${response.status}`)) \n}\n\n\n\n// функция register - принимает почту и пароль, отправляет запрос регистрации на /signup\n// функция login - принимает почту и пароль, отправляет запрос авторизации на /signin . В ответ сервер вернет jwt, который нужно сохранить в localStorage\n// функция checkToken - принимает jwt, отправляет запрос на /users/me и возвращает данные пользователя"]},"metadata":{},"sourceType":"module"}